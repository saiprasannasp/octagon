<?xml version="1.0"?>

<launch>
  <param name="use_sim_time" value="false" />

  <rosparam file="$(find nabtesco_serial)/config/nabtesco.yaml" command="load" ns="nabtesco" />
  
  <node pkg="nabtesco_imu" name="nabtesco_imu" type="nabimunode"/>
  <node pkg="nabtesco_serial" name="nabtesco_serial" type="nabtesco_serial" output="screen">
  	<param name="lwheel_usb_name" value="/dev/ttyACM0"/>
  	<param name="rwheel_usb_name" value="/dev/ttyACM1"/>
	<!--remap from="odom" to="/odom_serial" /-->
  </node>
  <node name="nmea_navsat_driver" pkg="nmea_navsat_driver" type="nmea_serial_driver">
   <param name="port" value="/dev/ttyACM2" />
  </node>

  <!--include file="$(find ekf_example)/launch/ekf_example.launch" /-->
  <arg name="scan_topic" default="/scan" />
  <node name="urg_node" pkg="urg_node" type="urg_node">
   <param name="frame_id" value="/base_scan" />
   <param name="ip_address" value="192.168.0.10" />
   <param name="angle_min" value="-1.88495559215" />
   <param name="angle_max" value="1.74532925199" />
   <param name = "frame_id" value= "/base_link"/>
  </node>
  <node pkg="tf" type="static_transform_publisher" name="laser_to_base_link" args="0 0 0.482 0 0 0 /base_link /base_scan 100" />
 

  <!--node pkg="gmapping" type="slam_gmapping" name="slam_gmapping" >
    <rosparam file="$(find nabtesco_serial)/config/gmapping_params.yaml" />
    <remap from="scan" to="/scan" />
    <remap from="dynamic_map" to="/map" />
   <param name="scan" value="/scan" />
  </node-->
  
  
<!--node pkg="amcl" type="amcl" name="amcl">
    <rosparam file="$(find nabtesco_serial)/config/nab_amcl.yaml" command="load"/>
    <param name="initial_pose_x" value="0.0"/>
    <param name="initial_pose_y" value="0.0"/>
    <param name="initial_pose_z" value="0.0"/>
    <remap from="scan" to="/scan" />
  </node-->

  <!--node name="map_server" pkg="map_server" type="map_server" args="$(find nabtesco_serial)/map/mymap_2.yaml"/-->

  <!--node pkg="map_server" type="map_server" name="slam_map_loader" args="$(find gmapping_test)/yaml/map.yaml" /-->

  <arg name="no_static_map" default="true"/>
  <arg name="base_global_planner" default="navfn/NavfnROS"/>
  <!--arg name="base_local_planner" default="dwa_local_planner/DWAPlannerROS"/-->
  <arg name="base_local_planner" default="base_local_planner/TrajectoryPlannerROS"/>

  <node pkg="move_base" type="move_base" respawn="false" name="move_base" output="screen">

    <param name="base_global_planner" value="$(arg base_global_planner)"/>
    <param name="base_local_planner" value="$(arg base_local_planner)"/>  
    <rosparam file="$(find nabtesco_serial)/config/nav/planner.yaml" command="load"/>

    <!-- observation sources located in costmap_common.yaml -->
    <rosparam file="$(find nabtesco_serial)/config/nav/costmap_common.yaml" command="load" ns="global_costmap" />
    <rosparam file="$(find nabtesco_serial)/config/nav/costmap_common.yaml" command="load" ns="local_costmap" />

    <!-- local costmap, needs size -->
    <rosparam file="$(find nabtesco_serial)/config/nav/costmap_local.yaml" command="load" ns="local_costmap" />
    <param name="local_costmap/width" value="10.0"/>
    <param name="local_costmap/height" value="10.0"/>

    <!-- static global costmap, static map provides size -->
    <rosparam file="$(find nabtesco_serial)/config/nav/costmap_global_static.yaml" command="load" ns="global_costmap" unless="$(arg no_static_map)"/>
    
    <!-- global costmap with laser, for odom_navigation_demo -->
    <rosparam file="$(find nabtesco_serial)/config/nav/costmap_global_laser.yaml" command="load" ns="global_costmap" if="$(arg no_static_map)"/>
    <param name="global_costmap/width" value="100.0" if="$(arg no_static_map)"/>
    <param name="global_costmap/height" value="100.0" if="$(arg no_static_map)"/>

    <!-- Remap into namespace for cmd_vel_mux switching -->
    <!--remap from="cmd_vel" to="~cmd_vel" /-->

  </node>

  <param name="robot_description" textfile="$(find nabtesco_serial)/urdf/nabtesco.urdf" />
  <param name="use_gui" value="False"/>
  <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" />
  <node name="robot_state_publisher" pkg="robot_state_publisher" type="state_publisher" />

  


  <node pkg="rviz" type="rviz" name="rviz" args="-d $(find nabtesco_serial)/rviz/nab_rviz.rviz" respawn="false" />

</launch>
